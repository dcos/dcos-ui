// These styles extend default CNVS styles, which do not apply max-widths to the
// .container class, even though the variables are defined in CNVS. This might
// change in the future.
& when (@container-enabled) {
  /* Container */

  .container-wide {
    .property-variant(container-wide, width);
  }
}

& when (@layout-screen-small-enabled) {

  @media (min-width: @layout-screen-small-min-width) {

    & when not (@container-enabled = null) and not (@container-screen-small-enabled = null) {
      /* Container */

      .container-wide {
        .property-variant(container-wide, width, null, screen-small);
      }
    }
  }
}

& when (@layout-screen-medium-enabled) {

  @media (min-width: @layout-screen-medium-min-width) {

    & when not (@container-enabled = null) and not (@container-screen-medium-enabled = null) {
      /* Container */

      .container-wide {
        .property-variant(container-wide, width, null, screen-medium);
      }
    }
  }
}

& when (@layout-screen-large-enabled) {

  @media (min-width: @layout-screen-large-min-width) {

    & when not (@container-enabled = null) and not (@container-screen-large-enabled = null) {
      /* Container */

      .container-wide {
        .property-variant(container-wide, width, null, screen-large);
      }
    }
  }
}

& when (@layout-screen-jumbo-enabled) {

  @media (min-width: @layout-screen-jumbo-min-width) {

    & when not (@container-enabled = null) and not (@container-screen-jumbo-enabled = null) {
      /* Container */

      .container-wide {
        .property-variant(container-wide, width, null, screen-jumbo);
      }
    }
  }
}
