import { i18nMark } from "@lingui/react";

const DefaultErrorMessages = [
  //
  // The following rule will match every message path, behaving
  // like the default sink if a path is not found.
  //
  // Remember to concat these error messages when you are composing
  // your own at a higher level. For example:
  //
  // const PathCustomizations = [
  //  {
  //    path: /^id$/,
  //    type: 'PROP_MISSING',
  //    message: 'Please specify an ID'
  //  }
  //  'id': {
  //    PROP_MISSING: 'Please specify an ID'
  //   },
  //  'container.[^.]+.id': {
  //    PROP_MISSING: 'Please specify an ID for this container'
  //   }
  // ].concat(DefaultErrorMessages);
  //

  //
  // NOTE: Every time you are about to write a description for the error
  //       message make sure that it sounds natural *both* on it's own
  //       (ex. 'Must be one of ||value||') AND when prefixed with the
  //       expression 'The service' (ex. 'The service must be one of ||value||')
  //

  //
  // [A] The following error constants are used by the RAML Validator Loader
  //

  {
    path: /.*/,
    type: "ENUM",
    message: i18nMark("Must be one of ||values||"),
  },
  {
    path: /.*/,
    type: "ITEMS_MAX",
    message: i18nMark("Must contain at most ||value|| items in the array"),
  },
  {
    path: /.*/,
    type: "ITEMS_MIN",
    message: i18nMark("Must contain at least ||value|| items in the array"),
  },
  {
    path: /.*/,
    type: "ITEMS_UNIQUE",
    message: i18nMark("Must contain only unique items"),
  },
  {
    path: /.*/,
    type: "LENGTH_MAX",
    message: i18nMark("Must be at most ||value|| characters long"),
  },
  {
    path: /.*/,
    type: "LENGTH_MIN",
    message: i18nMark("Must be at least ||value|| characters long"),
  },
  {
    path: /.*/,
    type: "NUMBER_MAX",
    message: i18nMark("Must be smaller than or equal to ||value||"),
  },
  {
    path: /.*/,
    type: "NUMBER_MIN",
    message: i18nMark("Must be bigger than or equal to ||value||"),
  },
  {
    path: /.*/,
    type: "NUMBER_MULTIPLEOF",
    message: i18nMark("Must be multiple of ||value||"),
  },
  {
    path: /.*/,
    type: "NUMBER_TYPE",
    message: i18nMark("Must be of type `||type||`"),
  },
  {
    path: /.*/,
    type: "PROPS_MAX",
    message: i18nMark("Must contain at most ||value|| properties"),
  },
  {
    path: /.*/,
    type: "PROPS_MIN",
    message: i18nMark("Must contain at least ||value|| properties"),
  },
  {
    path: /.*/,
    type: "PROP_ADDITIONAL_PROPS",
    message: i18nMark("Contains extraneous property `||name||`"),
  },
  {
    path: /.*/,
    type: "PROP_IS_MISSING",
    message: i18nMark("Must be defined"),
  },
  {
    path: /.*/,
    type: "PROP_MISSING",
    message: i18nMark("Must define property `||name||`"),
  },
  {
    path: /.*/,
    type: "PROP_MISSING_MATCH",
    message: i18nMark("Must contain a property that matches `||pattern||`"),
  },
  {
    path: /.*/,
    type: "STRING_PATTERN",
    message: i18nMark("Must match the pattern `||pattern||`"),
  },
  {
    path: /.*/,
    type: "TYPE_NOT_ARRAY",
    message: i18nMark("Must be an array"),
  },
  {
    path: /.*/,
    type: "TYPE_NOT_BOOLEAN",
    message: i18nMark("Must be a boolean value"),
  },
  {
    path: /.*/,
    type: "TYPE_NOT_DATETIME",
    message: i18nMark("Must be a date/time string"),
  },
  {
    path: /.*/,
    type: "TYPE_NOT_INTEGER",
    message: i18nMark("Must be an integer number"),
  },
  {
    path: /.*/,
    type: "TYPE_NOT_NULL",
    message: i18nMark("Must be null"),
  },
  {
    path: /.*/,
    type: "TYPE_NOT_NUMBER",
    message: i18nMark("Must be a number"),
  },
  {
    path: /.*/,
    type: "TYPE_NOT_OBJECT",
    message: i18nMark("Must be an object"),
  },
  {
    path: /.*/,
    type: "TYPE_NOT_STRING",
    message: i18nMark("Must be a string"),
  },

  //
  // [B] The following error constants are generated by parsing the
  //     marathon error messages
  //

  {
    path: /.*/,
    type: "ALREADY_EXISTS",
    message: i18nMark("Already Exists"),
  },

  //
  // [C] Custom Error Messages
  //

  /**
   * Value of a certain shape
   */
  {
    path: /.*/,
    type: "VALUE_SHAPE",
    message: i18nMark("Must be a certain shape: ||shape||"),
  },
];

export default DefaultErrorMessages;
