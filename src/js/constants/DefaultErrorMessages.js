import ErrorMessagesUtil from '../utils/ErrorMessagesUtil';

const DefaultErrorMessages = ErrorMessagesUtil.create({

  //
  // The following rule will match every message path, behaving
  // like the default sink if a path is not found.
  //
  // Remember to include these error messages when you are composing
  // your own at a higher level. For example:
  //
  // const PathCustomizations = Object.assign({
  //  'id': {
  //    PROP_MISSING: 'Please specify an ID'
  //   },
  //  'container.[^.]+.id': {
  //    PROP_MISSING: 'Please specify an ID for this container'
  //   }
  // }, DefaultErrorMessages);
  //

  '.*': {

    // The following error constants are used by the RAML Validator Loader
    ENUM: 'Must be one of {values}',
    ITEMS_MAX: 'Must contain at most {value} items in the array',
    ITEMS_MIN: 'Must contain at least {value} items in the array',
    LENGTH_MAX: 'Must be at most {value} characters long',
    LENGTH_MIN: 'Must be at least {value} characters long',
    NUMBER_MAX: 'Must be smaller than or equal to {value}',
    NUMBER_MIN: 'Must be bigger than or equal to {value}',
    NUMBER_TYPE: 'Must be of type `{value}`',
    PROP_MISSING: 'Missing property',
    PROP_MISSING_MATCH: 'Missing a property that matches `{name}`',
    STRING_PATTERN: 'Must match the pattern "{pattern}"',
    TYPE_NOT_ARRAY: 'Expecting an array',
    TYPE_NOT_BOOLEAN: 'Expecting a boolean value',
    TYPE_NOT_DATETIME: 'Expecting a date/time string',
    TYPE_NOT_INTEGER: 'Expecting an integer number',
    TYPE_NOT_NUMBER: 'Expecting a number',
    TYPE_NOT_OBJECT: 'Expecting an object',
    TYPE_NOT_STRING: 'Expecting a string',

    // The following error constants are generated by parsing the
    // marathon error messages
    ALREADY_EXISTS: 'Already exits'

  }
});

module.exports = DefaultErrorMessages;
