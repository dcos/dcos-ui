#!/usr/bin/env bash

# README
#
# DC/OS UI bump helper script - its bash, its ugly, but it works ¯\_(ツ)_/¯
# Feel free to do it manually ʘ‿ʘ
#
# Usage
# You need to provide a Github Personal Access Token[1] and call the script like this
# GH_USER=you GH_PERSONAL_TOKEN=123445 ./bump.sh <master|1.12|1.11>
#
# [1]
# Github Personal Access Token: https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/
# Token needs full repo permission (nothing else)

set -e

target=${1:-master}

if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    echo "Usage Example: GH_PERSONAL_TOKEN=123445 ./bump.sh master"
    exit 0
fi

if [ "$1" == "--version" ]; then
    echo "bump v0.0.1"
    exit 0
fi


function ghcurl() {
  curl -s -H "Content-Type: application/json" -H "Authorization: token ${GH_PERSONAL_TOKEN}" "$@"
}

function dgit() {
  git -C ./dcos "$@"
}


printf "\n\n=== Cloning DCOS ====================================================================\n"
[ ! -d ./tmp ] && mkdir ./tmp
[ ! -d ./tmp/dcos ] && git -C ./tmp clone https://${GH_USER}:${GH_PERSONAL_TOKEN}@github.com/mesosphere/dcos.git
# this also is a safety measure to not mess with you local git repo accidentally. imagine you `git checkout .` (without the `-C ./dcos`) while hacking this script... :blush:
cd ./tmp



printf "\n\n=== Processing current buildinfo.json (OSS) =================================================\n"
dgit checkout ${target} && dgit checkout .
oss_current_tag=$(jq .single_source.url ./dcos/packages/dcos-ui/buildinfo.json | grep -oE "v[0-9]{1,}\.[0-9]{1,}\.[0-9]{1,}")
oss_latest_version=$(ghcurl https://api.github.com/repos/dcos/dcos-ui/releases | jq -r ".[].tag_name" | sort -V | tail -n1)


printf "\n\n=== Check if bump necessary =================================================================\n"
echo "current oss version: $oss_current_tag"
echo "new oss version: $oss_latest_version"
if [ "$oss_current_tag" == "$oss_latest_version" ] ; then
    echo "No bump necessary."
    exit 0
else
    echo "Bump necessary."
fi



printf "\n\n=== Check for open Bump PRs =================================================================\n"
existing_oss_bump_pr=$(ghcurl "https://api.github.com/search/issues?q=repo%3Adcos%2Fdcos+is%3Apr+is%3Aopen+%22%5B${target}%5D+Automated+Bump+DC%2FOS+UI%22+-label%3A%22ship+it%22+author%3A${GH_USER}" | jq .items[0].number)
if [ $existing_oss_bump_pr != "null" ]; then
  echo "Bump PR already open: https://github.com/dcos/dcos/pull/${existing_oss_bump_pr}"
fi



# printf "\n\n=== Get JIRAs from git log ==================================================================\n"
# oss_jira_ids="$(git -C ./dcos-ui --no-pager log ${oss_current_tag}...${oss_latest_version} | grep -oE "(D2IQ|Marathon|DCOS(_OSS)?)-[0-9]{1,6}" || echo "")"
# echo "Found these JIRAS:"
# echo $oss_jira_ids



printf "\n\n=== Prepare OSS bump branch =================================================================\n"
oss_bump_branch="dcos-ui/bump/$(date +%F-%H-%M-%S)/${oss_latest_version}"
dgit checkout ${target}
dgit checkout -b ${oss_bump_branch}
curl -L $(curl -s https://api.github.com/repos/dcos/dcos-ui/releases | jq -r '.[] | select( .tag_name == "v5.0.23") | .assets[] | select ( .name == "buildinfo.json" ) | .browser_download_url ') > ./dcos/packages/dcos-ui/buildinfo.json
sed -i "s;Updated DC.OS UI to.*;* Updated DC/OS UI to [${oss_latest_version}](https://github.com/dcos/dcos-ui/releases/tag/${oss_latest_version}).;" ./dcos/CHANGES.md
dgit add packages/dcos-ui/buildinfo.json CHANGES.md
dgit commit -m "chore: Bump DC/OS UI ${oss_latest_version}"
dgit push origin $oss_bump_branch



printf "\n\n=== Create OSS bump PR ======================================================================\n"
curl https://raw.githubusercontent.com/dcos/dcos/master/PULL_REQUEST_TEMPLATE.md -o ./PULL_REQUEST_TEMPLATE.md
oss_bump_pr_body="$(cat ./PULL_REQUEST_TEMPLATE.md | sed -e "s/  - \[DCOS-ID\](https:\/\/jira.mesosphere.com\/browse\/DCOS-<number>) JIRA title \/ short description./$(echo "$oss_jira_ids" | awk '{printf "%s ", $0}')/" | awk '{printf "%s\\n", $0}' )"
echo "{
  \"title\": \"[${target}] Automated Bump DC/OS UI ${oss_latest_version}\",
  \"body\": \"${oss_bump_pr_body}\",
  \"head\": \"mesosphere:${oss_bump_branch}\",
  \"base\": \"${target}\",
  \"maintainer_can_modify\": true
}
" > ./oss.pr.json
ghcurl -X POST --data @./oss.pr.json "https://api.github.com/repos/dcos/dcos/pulls" > ./oss.pr-response.json
oss_bump_pr="$(jq .number ./oss.pr-response.json)"

# printf "\n\n=== Waiting for EE bump PR =======================================================================\n"

# ee_bump_pr=""
# while [ -z "$ee_bump_pr" ]; do
#   echo "Waiting for Mergebot…"
#   sleep 5;
#   ee_bump_pr=$(ghcurl https://api.github.com/repos/dcos/dcos/issues/${oss_bump_pr}/comments | jq .[].body | grep "Enterprise Bump PR" | grep -oE "[0-9]{4,5}" || echo "")
# done

# sleep 30; # adding this a safety net if mergebot was too quick…



printf "\n\n=== Close old PRs ======================================================================\n"
if [ "$existing_oss_bump_pr" != "null" ]; then
    ghcurl -X POST --data "{\"body\": \"Superseded by #${oss_bump_pr}\"}" "https://api.github.com/repos/dcos/dcos/issues/${existing_oss_bump_pr}/comments" > /dev/null
    ghcurl -X POST --data '{"state":"closed"}' "https://api.github.com/repos/dcos/dcos/pulls/${existing_oss_bump_pr}" > /dev/null
fi


# printf "\n\n=== Posting to Slack ======"
# Slack integration comes from here: https://gist.github.com/dopiaza/6449505

# slack_message="@frontend-team please review these bumps:\n- OSS: [${target}] ${oss_latest_version}: https://github.com/dcos/dcos/pull/${oss_bump_pr}"

# escapedText=$(echo $slack_message | sed 's/"/\"/g' | sed "s/'/\'/g" )
# json="{\"channel\": \"#frontend\", \"username\":\"DC/OS UI Bump Bot\", \"icon_emoji\":\"ghost\", \"attachments\":[{\"color\":\"danger\" , \"text\": \"$escapedText\"}]}"


# posts to #frontend
# curl -s -d "payload=$json" "https://hooks.slack.com/services/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"



printf "\n\n=== Here's your PR ======================================================================\n"
jq -r .url ./oss.pr-response.json
