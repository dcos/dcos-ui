#!/bin/bash

set -e
set -x

# This file is intended to run on Jenkins, if you need to run it
# locally, you need to provide some environment variables:
#
# GIT_COMMIT: Commit SHA to work on
# BRANCH_NAME: Branch Name to work on
# GIT_USER: git user for curl command
# GIT_PASSWORD: git password for curl command
# aws login credentials
#
# run these commands from project root:
# 1. npm run build
# 2. tar czf "release.tar.gz" dist
# 3. <get aws credentials setup in AWS_ACCESS_KEY_ID & AWS_SECRET_ACCESS_KEY>
# 4. FORCE_UPLOAD=1 BRANCH_NAME=$(git branch | grep \* | cut -d' ' -f2) GIT_COMMIT=$(git rev-parse HEAD) GIT_USER=<your_user> GIT_PASSWORD=<your_password> ./scripts/ci/release-latest

## Configuration
#####################################################################

# path of this file
SCRIPT_PATH="$(cd $(dirname "$0")/$(dirname "$(readlink "$0")") && pwd)"

# project root for this file
PROJECT_ROOT="$( cd "$( echo ${SCRIPT_PATH} | sed s+/scripts/ci++)" && pwd )"

# get correct DC/OS target (=base branch!) from Jenkinsfile
PKG_TARGET="${1}"

# release version (after switching to semantic-release, we cant use package.json anymore)
PKG_VERSION_OSS="$(git tag -l --sort=-version:refname | grep ${PKG_TARGET}+ | head -1 | cut -d'+' -f2)"
PKG_VERSION_EE="${PKG_VERSION_OSS}+${GIT_COMMIT:0:8}"

# Tag name pushed to ee plugins repo
GIT_TAG_NAME_EE="${PKG_TARGET}+${PKG_VERSION_EE}"

# build release name for branch and file names
# Examples:
# - 1.12+dcos-ui-v2.0.1
# - 1.11+dcos-ui-v1.16.0
RELEASE_NAME_OSS="${PKG_TARGET}+dcos-ui-${PKG_VERSION_OSS}"
# Examples:
# - master+dcos-ui-enterprise-v2.0.1+abcdef78
RELEASE_NAME_EE="${PKG_TARGET}+dcos-ui-enterprise-${PKG_VERSION_EE}"

# dcos branch to work with
DCOS_BRANCH_OSS="dcos-ui/${PKG_TARGET}+dcos-ui-latest"
DCOS_BRANCH_EE="dcos-ui/${PKG_TARGET}+dcos-ui-enterprise-latest"

## Prepare upstream.json
#####################################################################

DCOS_COMMIT_OSS="$(git ls-remote https://github.com/mesosphere/dcos | grep "refs/heads/${DCOS_BRANCH_OSS}" | sed -n 1p | cut -f1)"

cat <<EOF > ./upstream.json
{
	"git": "https://github.com/mesosphere/dcos",
	"kind": "git",
	"ref": "${DCOS_COMMIT_OSS}",
	"ref_origin": "${DCOS_BRANCH_OSS}"
}
EOF

## Create Assets & Generate Upload Data
#####################################################################

VERSION_PLACEHOLDER="0.0.0-dev+semantic-release"

# first, replace placeholder in dist bundle and verify that it worked
sed -i"" "s/${VERSION_PLACEHOLDER}/${PKG_TARGET}+${PKG_VERSION_EE}/" ${PROJECT_ROOT}/dist/index.html
if ! grep "${PKG_TARGET}+${PKG_VERSION_EE}" ${PROJECT_ROOT}/dist/index.html; then
  echo "Version injection into dist/index.html failed!"
  exit 1
fi

# second, create tarball
tar czf release.tar.gz dist

# third, upload tarball
# if this fails, there is already a release with this SHA -> stop.
RELEASE_NAME="${RELEASE_NAME_EE}" \
  ${SCRIPT_PATH}/utils/upload-build || exit 0

# Upload source maps to sentry.io
SENTRY_AUTH_TOKEN="${SENTRY_AUTH_TOKEN}" \
  RELEASE_NAME="${PKG_TARGET}+${PKG_VERSION_EE}" \
  "${SCRIPT_PATH}/utils/upload-sourcemaps" || exit 0

## Push Tag to DC/OS UI
####################################################################

# push new "semantic-release(ish)" tag to plugins repo
cd plugins-ee
git tag ${GIT_TAG_NAME_EE}
git push "https://${GIT_USER}:${GIT_PASSWORD}@github.com/mesosphere/dcos-ui-plugins-private.git" ${GIT_TAG_NAME_EE}
cd ..

## Update DC/OS
#####################################################################

DCOS_BRANCH=${DCOS_BRANCH_EE} \
  DCOS_ORIGIN="mesosphere/dcos-enterprise" \
  PKG_TARGET=${PKG_TARGET} \
  PKG_VERSION=${PKG_VERSION_EE} \
  ${SCRIPT_PATH}/utils/update-dcos-repo-ee
