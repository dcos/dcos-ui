#!/bin/bash

set -e
[ -n "${DEBUG}" ] && set -x

# This script is a temporary solution to run the integration tests in a <= 1.GB
# memory environment and with support for retries per test file. We should
# replace it with a test runner in the future, please see it more as a proof of
# concept

## Configuration
#####################################################################

# Search string passed to `find`
# Values: String
SEARCH=${1:-'*'}

# Maximum number of retries
# Values: n ∈ ℕ
RETRIES=${RETRIES:-3}

# Stop if file failed $RETRIES times? (turn this off, if you want
# to test all tests locally but something keeps failing)
# Values: 0, 1
STOP_ON_FAIL=${STOP_ON_FAIL:-1}

# Suppresses Cypress output on failures
# Values: 0, 1
SUPPRESS_OUTPUT=${SUPPRESS_OUTPUT:-0}

CLEANUP_TESTS=${CLEANUP_TESTS:-0}

PROXY_PORT=${PROXY_PORT:-4200}
PROXY_PID=0

PROJECT_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../../" && pwd )"
CYPRESS_FOLDER="cypress"
TESTS_FOLDER="tests"

PLUGINS_PATH=${PLUGINS_PATH:-''}



## Functions
#####################################################################

# executes Cypress
#
# from callee:
# FILE: file to test
# OUTPUT_PATH: Directory where results are saved (e.g. "some/path/to/Testfile-cy.js-1")
function executeCypress {
  npm run --silent cypress -- \
    --spec "${FILE}" \
    --config "screenshotsFolder=${OUTPUT_PATH}/screenshots,videosFolder=${OUTPUT_PATH}/videos" \
    --reporter junit \
    --reporter-options "mochaFile=${OUTPUT_PATH}/result.xml"
}

# runs tests for matched file
#
# From callee:
# RELATIVE_PATH: stripped down output from find command (e.g. "pages/Testfile-cy.js")
function runTestFile {
  echo ""
  echo "==> Running Tests for ./${TESTS_FOLDER}/$RELATIVE_PATH"
  local RUN=0
  local EXIT_CODE=1
  while [ $EXIT_CODE -ne 0 ] && [ $RUN -lt $RETRIES ]; do
    RUN=$((RUN+1))
    local OUTPUT_PATH="${PROJECT_ROOT}/${CYPRESS_FOLDER}/${RELATIVE_PATH}-${RUN}"

    echo "===> Executing Cypress (${RUN}/${RETRIES})"
    CYOUT="$(FILE="${PROJECT_ROOT}/tests/${RELATIVE_PATH}" RUN=${RUN} OUTPUT_PATH=${OUTPUT_PATH} executeCypress)"
    EXIT_CODE=$?

    if [ $EXIT_CODE -eq 0 ]; then
      report "$(basename ${RELATIVE_PATH})" "success"
      echo "====> Successfully finished tests for ${RELATIVE_PATH}"
    else
      report "$(basename ${RELATIVE_PATH})" "failure"
      echo "====> Failures in tests for ${RELATIVE_PATH}"
      [ $SUPPRESS_OUTPUT -eq 0 ] && echo "${CYOUT}"
    fi
  done

  if [ $EXIT_CODE -ne 0 ]; then
    echo "===> Couldn't get a success in $RETRIES retries for $RELATIVE_PATH"
  fi

  if [ ${EXIT_CODE} -ne 0 ] && [ ${STOP_ON_FAIL} -eq 0 ]; then
    echo "==> Continuing despite failures…"
    return 0
  fi

  return $EXIT_CODE
}

# copies tests from plugins folder into project
# this is necessary because Cypress doesnt allows external files to be tested…
function setup_plugins {
  if [ -n "${PLUGINS_PATH}" ]; then
    echo "==> Setup external plugins…"
    rsync -aH "${PROJECT_ROOT}/${PLUGINS_PATH}/${TESTS_FOLDER}/" "${PROJECT_ROOT}/${TESTS_FOLDER}/"
    echo "===> done."
  else
    echo "==> No Plugins configured."
  fi
}

# removes copied plugins files…
function teardown_plugins {
  if [ -n "${PLUGINS_PATH}" ]; then
    if [ "${CLEANUP_TESTS}" -eq 0 ]; then
      echo ""
      echo "==> !!! PLUGINS TESTS ARE STILL IN YOUR ./${TESTS_FOLDER} FOLDER, MAKE SURE TO CLEAN UP !!!"
      echo "==> You can use 'rm -r ./${TESTS_FOLDER} && git checkout ./${TESTS_FOLDER}' to easily clean up."
      echo "==> Or you can provide CLEANUP_TESTS=1 to this script in order to automatically clean up."
      echo ""
    else
      echo "==> Cleaning up ./${TESTS_FOLDER} folder"
      rm -r "${PROJECT_ROOT:?}/${TESTS_FOLDER}"
      git checkout "${PROJECT_ROOT}/${TESTS_FOLDER}"
      echo "==> done."
    fi
  fi
}

# merges results from cypress runs into one file
function teardown_merge {
  if [ "$(find "${PROJECT_ROOT}/${CYPRESS_FOLDER}/" -type f -name result.xml | wc -l)" -ne 0 ]; then
    echo "==> Merging results from ./${CYPRESS_FOLDER}/*/result.xml into ./${CYPRESS_FOLDER}/results.xml…"
    junit-merge --out "${PROJECT_ROOT}/${CYPRESS_FOLDER}/results.xml" $(find "${PROJECT_ROOT}/${CYPRESS_FOLDER}/" -type f -name result.xml)
    echo "===> done."
  else
    echo "==> Nothing to merge."
  fi
}

function teardown_proxy {
  echo "==> Killing Proxy…"
  kill $PROXY_PID
  echo "===> done."
}

# sets up everything
function setup {
  echo ""
  echo "=> Setup"

  ## Setup proxy
  if [ -n "$(lsof -i :"${PROXY_PORT}")" ]; then
    echo "==> ERROR: Port ${PROXY_PORT} is already in use"
    exit 1
  fi
  if [ ! -d "${PROJECT_ROOT}/dist" ]; then
    echo "==> ERROR: no dist folder! forgot npm run build?"
    exit 1
  fi
  echo "==> Starting http-server, serving files from ./dist…"
  npx http-server -sp "${PROXY_PORT}" "${PROJECT_ROOT}/dist"&
  PROXY_PID=$!
  echo "===> done (PID: ${PROXY_PID})."

  ## Setup plugins if configured
  if [ -n "${PLUGINS_PATH}" ]; then
    setup_plugins
  fi

  ## Remove old results
  if [ -d "${PROJECT_ROOT}/${CYPRESS_FOLDER}" ]; then
    echo "==> Directory ./${CYPRESS_FOLDER} already exists…"
    rm -r "${PROJECT_ROOT:?}/${CYPRESS_FOLDER}"
    echo "===> removed."
  fi
}

# tears down everything…
function teardown {
  echo ""
  echo "=> Teardown"
  teardown_proxy
  teardown_plugins
  teardown_merge
  echo "=> Bye."
}

# reports to data dog if flag is set
# $1 should be the file name
# $2 should be "success" or "failure"
function report {
  if [ "$REPORT" = true ]; then
    # TODO: make tags configurable from the outside
    dogapi metric send "dcos_ui.$1.$2" --type 'count' --tags "distribution:oss,branch:master"
  fi
}

# finds the files and runs the tests
function run_tests {
  echo ""
  echo "=> Running Tests"
  find "$PROJECT_ROOT/${TESTS_FOLDER}" -type f -name "${SEARCH}-cy.js" -print | \
    while read FOUND_FILE
    do
      RELATIVE_PATH="$(echo "${FOUND_FILE}" | sed s+${PROJECT_ROOT}/${TESTS_FOLDER}/++)" runTestFile || exit 1
    done
}
