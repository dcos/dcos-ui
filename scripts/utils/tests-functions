#!/bin/bash

set -e
[ -n "${DEBUG}" ] && set -x

## Functions
#####################################################################

# executes Cypress
#
# from callee:
# FILE: file to test
# OUTPUT_PATH: Directory where results are saved (e.g. "some/path/to/Testfile-cy.js-1")
function executeCypress() {
  RECORD_VIDEO=${RECORD_VIDEO:-'true'}

  if [ -n "${CLUSTER_URL}" ]; then
    CYPRESS_ENV="CLUSTER_URL=\"${CLUSTER_URL}\""
  fi

  if [ -n "${CLUSTER_AUTH_TOKEN}" ]; then
    CYPRESS_ENV="${CYPRESS_ENV},CLUSTER_AUTH_TOKEN=\"${CLUSTER_AUTH_TOKEN}\""
  fi

  if [ -n "${CLUSTER_AUTH_INFO}" ]; then
    CYPRESS_ENV="${CYPRESS_ENV},CLUSTER_AUTH_INFO=\"${CLUSTER_AUTH_INFO}\""
  fi

  if [ -n "${TEST_UUID}" ]; then
    CYPRESS_ENV="${CYPRESS_ENV},TEST_UUID=\"${TEST_UUID}\""
  fi

  if [ -n "${CYPRESS_ENV}" ]; then
    CYPRESS_ENV="--env $CYPRESS_ENV"
  fi

  npx cypress run \
    ${CYPRESS_HEADED:+"--headed"} \
    ${CYPRESS_NO_EXIT:+"--no-exit"} \
    --spec "${FILE}" \
    --config "screenshotsFolder=${OUTPUT_PATH}/screenshots,video=${RECORD_VIDEO},videosFolder=${OUTPUT_PATH}/videos,integrationFolder=${TESTS_FOLDER},supportFile=${TESTS_FOLDER}/_support,fixturesFolder=${TESTS_FOLDER}/_fixtures" \
    --reporter junit \
    ${CYPRESS_ENV:-""} \
    --reporter-options "mochaFile=${OUTPUT_PATH}/result.xml"
}

# runs tests for matched file
#
# From callee:
# RELATIVE_PATH: stripped down output from find command (e.g. "pages/Testfile-cy.js")
function runTestFile() {
  echo ""
  echo "==> Running Tests for ./${TESTS_FOLDER}/$RELATIVE_PATH"
  local RUN=0
  local EXIT_CODE=1
  while [ $EXIT_CODE -ne 0 ] && [ $RUN -lt $RETRIES ]; do
    RUN=$((RUN + 1))
    local OUTPUT_PATH="${PROJECT_ROOT}/${CYPRESS_FOLDER}/${RELATIVE_PATH}-${RUN}"
    # Record video only on the 3rd run, videos are heavy
    local RECORD_VIDEO=$([ "$RUN" == 3 ] && echo "true" || echo "false")

    if [ -f "$(dirname "${PROJECT_ROOT}/${TESTS_FOLDER}/${RELATIVE_PATH}")/_scripts/setup" ]; then
      echo "==> Running setup script"
      TEST_UUID=${TEST_UUID} $(dirname "${PROJECT_ROOT}/${TESTS_FOLDER}/${RELATIVE_PATH}")/_scripts/setup
    fi

    # TODO: env vars for cypress
    echo "===> Executing Cypress (${RUN}/${RETRIES})"
    CYOUT="$(FILE="${PROJECT_ROOT}/${TESTS_FOLDER}/${RELATIVE_PATH}" \
      RUN=${RUN} \
      OUTPUT_PATH="${OUTPUT_PATH}" \
      RECORD_VIDEO=${RECORD_VIDEO} \
      executeCypress)"
    EXIT_CODE=$?

    if [ -f "$(dirname "${PROJECT_ROOT}/${TESTS_FOLDER}/${RELATIVE_PATH}")/_scripts/teardown" ]; then
      echo "==> Running teardown script"
      TEST_UUID=${TEST_UUID} $(dirname "${PROJECT_ROOT}/${TESTS_FOLDER}/${RELATIVE_PATH}")/_scripts/teardown
    fi

    if [ $EXIT_CODE -eq 0 ]; then
      report "$RELATIVE_PATH" "success"
      echo "====> Successfully finished tests for ${RELATIVE_PATH}"
    else
      report "$RELATIVE_PATH" "failure"
      echo "====> Failures in tests for ${RELATIVE_PATH}"
      [ $SUPPRESS_OUTPUT -eq 0 ] && echo "${CYOUT}"
    fi
  done

  if [ $EXIT_CODE -ne 0 ]; then
    echo "===> Couldn't get a success in $RETRIES retries for $RELATIVE_PATH"
  fi

  if [ ${EXIT_CODE} -ne 0 ] && [ ${STOP_ON_FAIL} -eq 0 ]; then
    echo "==> Continuing despite failures…"
    return 0
  fi

  return $EXIT_CODE
}

# copies tests from plugins folder into project
# this is necessary because Cypress doesnt allows external files to be tested…
function setup_plugins() {
  if [ -n "${PLUGINS_PATH}" ]; then
    echo "==> Setup external plugins…"
    rsync -aH "${PROJECT_ROOT}/${PLUGINS_PATH}/${TESTS_FOLDER}/" "${PROJECT_ROOT}/${TESTS_FOLDER}/"
    echo "===> done."
  else
    echo "==> No Plugins configured."
  fi
}

# removes copied plugins files…
function teardown_plugins() {
  if [ -n "${PLUGINS_PATH}" ]; then
    if [ "${CLEANUP_TESTS}" -eq 0 ]; then
      echo ""
      echo "==> !!! PLUGINS TESTS ARE STILL IN YOUR ./${TESTS_FOLDER} FOLDER, MAKE SURE TO CLEAN UP !!!"
      echo "==> You can use 'rm -r ./${TESTS_FOLDER} && git checkout ./${TESTS_FOLDER}' to easily clean up."
      echo "==> Or you can provide CLEANUP_TESTS=1 to this script in order to automatically clean up."
      echo ""
    else
      echo "==> Cleaning up ./${TESTS_FOLDER} folder"
      rm -r "${PROJECT_ROOT:?}/${TESTS_FOLDER}"
      git checkout "${PROJECT_ROOT}/${TESTS_FOLDER}"
      echo "==> done."
    fi
  fi
}

# merges results from cypress runs into one file
function teardown_merge() {
  if [ "$(find "${PROJECT_ROOT}/${CYPRESS_FOLDER}/" -type f -name result.xml | wc -l)" -ne 0 ]; then
    echo "==> Merging results from ./${CYPRESS_FOLDER}/*/result.xml into ./${CYPRESS_FOLDER}/results.xml…"
    junit-merge --out "${PROJECT_ROOT}/${CYPRESS_FOLDER}/results.xml" $(find "${PROJECT_ROOT}/${CYPRESS_FOLDER}/" -type f -name result.xml)
    echo "===> done."
  else
    echo "==> Nothing to merge."
  fi
}

function teardown_proxy() {
  echo "==> Killing Proxy…"
  kill $PROXY_PID
  echo "===> done."
}

# sets up everything
function setup() {
  echo ""
  echo "=> Setup"

  if [ -n "${DEVELOPMENT}" ]; then
    if [ -n "$(lsof -i :"${PROXY_PORT}")" ]; then
      echo "==> Something serves on ${PROXY_PORT}, we take that as the proxy"
    else
      ## Start Development server
      echo "==> Starting development server using npm start"
      npm start &
      PROXY_PID=$!
      echo "==> Waiting for npm start to finish"
      until $(curl -k --output /dev/null --silent --head --fail http://localhost:${PROXY_PORT}); do
        echo "Timed out, trying again in 10s…"
        sleep 10
      done
    fi
  else
    ## Setup proxy
    if [ -n "$(lsof -i :"${PROXY_PORT}")" ]; then
      echo "==> ERROR: Port ${PROXY_PORT} is already in use"
      exit 1
    fi
    if [ ! -d "${PROJECT_ROOT}/dist" ]; then
      echo "==> ERROR: no dist folder! forgot npm run build?"
      exit 1
    fi

    if [ -n "${CLUSTER_URL}" ]; then
      echo "==> Starting http-server, proxying ${CLUSTER_URL}, serving files from ./dist…"
      npx http-server -sp "${PROXY_PORT}" --proxy "${CLUSTER_URL}" --proxy-secure=false "${PROJECT_ROOT}/dist" &
      PROXY_PID=$!
      CLUSTER_URL_PROXIED="${CLUSTER_URL}"
      CLUSTER_URL="http://127.0.0.1:${PROXY_PORT}"
      echo "===> done (PID: ${PROXY_PID})."
    else
      echo "==> Starting http-server, serving files from ./dist…"
      npx http-server -sp "${PROXY_PORT}" "${PROJECT_ROOT}/dist" &
      PROXY_PID=$!
      echo "===> done (PID: ${PROXY_PID})."
    fi

    ## Setup plugins if configured
    if [ -n "${PLUGINS_PATH}" ]; then
      setup_plugins
    fi
  fi

  ## Remove old results
  if [ -d "${PROJECT_ROOT}/${CYPRESS_FOLDER}" ]; then
    echo "==> Directory ./${CYPRESS_FOLDER} already exists…"
    rm -r "${PROJECT_ROOT:?}/${CYPRESS_FOLDER}"
    echo "===> removed."
  fi
}

# tears down everything…
function teardown() {
  if [ -n "${NO_BUILD}" ]; then
    return
  fi

  echo ""
  echo "=> Teardown"
  teardown_proxy
  teardown_plugins
  teardown_merge
  echo "=> Bye."
}

# reports to data dog if flag is set
# $1 should be the file path
# $2 should be "success" or "failure"
function report() {
  if [ "$REPORT" = true ]; then
    file=$(basename $1)
    filename=${file%-cy.js}

    dogapi metric send "dcos_ui.$2" 1 --type 'count' --tags "distribution:$DISTRIBUTION,branch:$BRANCH,testfile:$filename"
  fi
}

# finds the files and runs the tests
function run_tests() {
  run_tests_one_by_one
}

function run_all_tests() {
  echo ""
  echo "=> Running All Tests"
  FILE="$PROJECT_ROOT/${TESTS_FOLDER}/**/*-cy.js" \
    OUTPUT_PATH="${PROJECT_ROOT}/${CYPRESS_FOLDER}/all" \
    executeCypress || exit 1
}

function run_tests_one_by_one() {
  echo ""
  echo "=> Running Tests"
  find "$PROJECT_ROOT/${TESTS_FOLDER}" -type f -name "${SEARCH}-cy.js" -print |
    while read FOUND_FILE; do
      RELATIVE_PATH="$(echo "${FOUND_FILE}" | sed s+${PROJECT_ROOT}/${TESTS_FOLDER}/++)" runTestFile || exit 1
    done
}
