#!/usr/bin/env bash

set -e
[ -n "${DEBUG}" ] && set -x

RETRIES=${RETRIES:-3}

if [ -z "$CLUSTER_URL" ]; then
  echo "No CLUSTER_URL present. We're running integration tests.";
else
  SCRIPT_PATH="$(dirname "$0")/$(dirname "$(readlink "$0")")"
  source $SCRIPT_PATH/utils/load_auth_env_vars;
fi

## Functions
#####################################################################

# executes Cypress
#
# from callee:
# FILE: file to test
function executeCypress() {
  npx cypress run \
    ${CYPRESS_HEADED:+"--headed"} \
    ${CYPRESS_NO_EXIT:+"--no-exit"} \
    --spec "${FILE}" \
    --config-file ${CYPRESS_CONFIG_FILE:-"cypress.json"} \
    --config "numTestsKeptInMemory=0,video=${RECORD_VIDEO:-'false'}$ADDITIONAL_CYPRESS_CONFIG"
}

# runs tests for matched file
#
# From callee:
# RELATIVE_PATH: stripped down output from find command (e.g. "pages/Testfile-cy.js")
function runTestFile() {
  echo ""
  echo "==> Running Tests for ./${TESTS_FOLDER}/$RELATIVE_PATH"
  date +"%T"
  local RUN=0
  local EXIT_CODE=1
  while [ $EXIT_CODE -ne 0 ] && [ $RUN -lt $RETRIES ]; do
    RUN=$((RUN + 1))
    # Record video only on the 3rd run, videos are heavy
    local RECORD_VIDEO=$([ "$RUN" == 3 ] && echo "true" || echo "false")

    DIR=$(dirname "${PROJECT_ROOT}/${TESTS_FOLDER}/${RELATIVE_PATH}")

    if [ -f "$DIR/_scripts/setup" ]; then
      echo "==> Running setup script"
      DCOS_DIR=${DCOS_DIR} TEST_UUID=${TEST_UUID} $DIR/_scripts/setup
    fi

    # TODO: env vars for cypress
    echo "===> Executing Cypress (${RUN}/${RETRIES})"
    CYOUT="$(FILE="${PROJECT_ROOT}/${TESTS_FOLDER}/${RELATIVE_PATH}" \
      RUN=${RUN} \
      RECORD_VIDEO=${RECORD_VIDEO} \
      executeCypress)"
    EXIT_CODE=$?

    if [ -f "$DIR/_scripts/teardown" ]; then
      echo "==> Running teardown script"
      DCOS_DIR=${DCOS_DIR} TEST_UUID=${TEST_UUID} $DIR/_scripts/teardown
    fi

    if [ $EXIT_CODE -ne 0 ]; then
      echo "${CYOUT}"
    fi
  done

  if [ $EXIT_CODE -ne 0 ]; then
    echo "===> Couldn't get a success in $RETRIES retries for $RELATIVE_PATH"
  fi

  return $EXIT_CODE
}

function merge_junit_files() {
  # $1 is expected to be "integration" or "system"
  if [ "$(find "${PROJECT_ROOT}/cypress/" -type f -name result-$1-*.xml | wc -l)" -ne 0 ]; then
    echo "==> Merging results from ./cypress/result-$1-*.xml into ./cypress/result-$1.xml…"
    junit-merge --out "${PROJECT_ROOT}/cypress/result-$1.xml" $(find ${PROJECT_ROOT}/cypress/result-$1-*.xml -type f)
    echo "===> done."
  fi
}


# merges results from cypress runs into one file
function teardown_merge() {
  merge_junit_files integration
  merge_junit_files system
}

# sets up everything
function setup() {
  echo "=> Setup"

  ## Setup proxy
  if [ -n "$(lsof -i :"${PROXY_PORT}")" ]; then
    echo "==> Port ${PROXY_PORT} is already in use, so i won't serve from dist but assume this is your local dev-server."
  else
    echo "==> No dev-server found. Starting http-server, proxying ${CLUSTER_URL}, serving files from ./dist…"
    if [ ! -d "${PROJECT_ROOT}/dist" ]; then
      echo "==> No dist folder found! Running `npm run build` for you now."
      npm run build
    fi
    npx http-server -sp "${PROXY_PORT}" --proxy "${CLUSTER_URL}" --proxy-secure=false "${PROJECT_ROOT}/dist" &
    PROXY_PID=$!
    CYPRESS_CLUSTER_URL="http://127.0.0.1:${PROXY_PORT}"
    echo "===> done (PID: ${PROXY_PID})."
  fi
}

# tears down everything…
function teardown() {
  echo ""
  echo "=> Teardown"
  [ "$PROXY_PID" != "0" ] && kill $PROXY_PID
  teardown_merge
  echo "=> Bye."
}


# finds the files and runs the tests
function run_tests() {
  run_tests_one_by_one
}

function run_tests_one_by_one() {
  echo ""
  echo "=> Running Tests"
  find "$PROJECT_ROOT/${TESTS_FOLDER}" -type f -name "${SEARCH}-cy.js" -print |
    while read FOUND_FILE; do
      RELATIVE_PATH="$(echo "${FOUND_FILE}" | sed s+${PROJECT_ROOT}/${TESTS_FOLDER}/++)" runTestFile || exit 1
    done
}
