#!/usr/bin/env bash

SCRIPT_PATH="$(dirname "$0")/$(dirname "$(readlink "$0")")"

# Import utils
source "${SCRIPT_PATH}/utils/message"

# Install/link GIT hooks
# Example: install_hooks "pre-commit post-rewrite"
install_hooks() {
  # Check if .git/hooks directory exists
  if [ ! -d ".git/hooks" ]
  then
    warning "Couldn't install hooks as the directory ${NC}.git/hooks/${RED}"\
              "doesn't exists"
    return
  fi

  # Install/link GIT hooks as defined in `GIT_HOOKS`
  title "Install GIT hooks..."

  for hook in $1
  do
    # Check if hook is executable
    if [ ! -x scripts/${hook} ]
    then
       warning "Couldn't install ${hook} hook as the hook is not"\
                "executable."
       continue
    fi

    header "Create symlink for ${hook} hook"

    # The hook path needs to be relative to the link path
    hookPath=../../scripts/${hook};
    linkPath=.git/hooks/${hook};

    if [ "$(readlink ${linkPath})" = "$hookPath" ]
    then
       info "Hook is already linked"
       continue
    fi

    # Create a symlink or show a prompt if the target file already exists.
    # If the response from the standard input begins with the character `y',
    # then unlink the target file so that the link may occur.
    # Otherwise, do not attempt the link.
    ln -si ../../scripts/${hook} .git/hooks/${hook}

    # Write an message based on the link result
    if [ $? -eq 0 ]
    then
      info "Linked ${hook} hook"
    else
      warning "Couldn't link ${hook} hook to"\
                "${NC}.git/hooks/${hook}${RED} as there is already a"\
                "file/symlink with the same name."
    fi


    # Write empty line to separate messages
    echo
  done
}

# Get staged files with matching name
# Example: get_staged_files_with_name '*.js'
get_staged_files_with_name(){
  echo $(git diff --staged --name-only -- "$1")
}

# Get the fork point
# This util will compare the provided <ref> (defaults to HEAD),
# with either "origin/master" (default) or the configured base (.gitbase)
# Example: get_fork_point HEAD
get_fork_point(){
  local base=$(cat .gitbase 2>/dev/null || echo "origin/master")

  echo $(git merge-base --fork-point ${base} $1)
}
